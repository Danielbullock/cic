### Introduction
There comes a time where logic and looping become useful. Ansible provides conditional constructs to cater for this.

Conditionals allow the result of a play to vary based on the value of variables, or the results of previous tasks.

### Learning Objectives

How to use Conditionals to add logic to Playbooks.

## Prerequisite knowledge

It is assumed that you are familiar with the basics of Ansible, such that you can define a simple Playbook.

**Note:** Before going any further do the following:

- `cd YOUR_CLONE_OF_THIS REPO`
- `source ./bin/env`
- `cd <%=env('exercise_path') %>`

Run `cic up` to bring up all the test infrastructure and support files required to complete this exercise. To stop and reset this infrastructure run `cic down`.

## Tutorial

### The When Statement

The When Statement defines the condition for **when** a certain action should happen.



<%
 example_logic_path = 'ansible/logic_examples.yml'
 required_variable_name = 'installation_dir'
 optional_variable_name = 'log_level'
 example_logic_yaml=<<YAML
---
- name: setup environment
  hosts: all
  tasks:
  - name: Runtime requirements check
    fail: msg="Required variable '{{ #{required_variable_name} }}' not set"
    when: #{required_variable_name} is undefined

  - name: Setup runtime
    shell: echo "Logging at '{{ #{optional_variable_name} }}'"
    when: #{optional_variable_name} is defined

YAML
%>

The condition is declared within the task itself using the `when` clause. The following example declares 2 tasks:
- `Runtime requirements check` - This will fail if the `<%= required_variable_name%>` variable is not supplied
- `Setup runtime` - which outputs a message if the `<%= optional_variable_name%>` variable is supplied.

```

<%= example_logic_yaml %>
```

In this example the when clause is defined using a 'test'. There are many ways you can utilise tests to define your conditionals, more information can be found [here.](https://docs.ansible.com/ansible/2.5/user_guide/playbooks_tests.html)

Write the above yaml to `<%= write_to_file(example_logic_path, example_logic_yaml) %>` so that you can try running it.

Running `<%= command("ansible-playbook #{example_logic_path} -c local", fail_on_error: false)%>`, i.e. not supplying the required `<%= required_variable_name %>` causes the first of our tasks to fail:
```
<%= last_command_output%>
```

We can fix this by supplying the `<%= required_variable_name %>` variable using the the `--extra-vars` option. Run `<%= command("ansible-playbook #{example_logic_path} -c local --extra-vars='#{required_variable_name}=/var'")%>`
```
<%= last_command_output %>
```

You'll notice that this time the playbook executed successfully but that the `Setup runtime` task did not execute. This is because we did not supply the optional `<%= optional_variable_name%>` variable that our when condition was looking for.

Run: `<%= command("ansible-playbook #{example_logic_path} -c local --extra-vars='#{required_variable_name}=/var #{optional_variable_name}=debug'")%>` to see the `Setup runtime`
task execute.
```
<%= last_command_output%>
```

<%
 example_or_yaml=<<YAML
---
- name: Global working hours
  hosts: all
  vars:
    day: Saturday
    time: 17:00

  tasks:
  - debug:
      msg: "No one will be available globally in the office till Monday 01:00 GMT"
    when: day=="Saturday" or day=="Sunday"
YAML
 example_and_yaml=<<YAML
---
- name: Global working hours
  hosts: all
  vars:
    day: Monday
    time: 5

  tasks:
  - debug:
      msg: "No one will be available globally in the office till 01:00 GMT"
    when: day=="Monday" and time>=5
YAML
%>

To combine multiple conditions you can make use of 'or' and 'and', where the play will execute if one of the conditions is met, or if both of the conditions are met, respectively.

Replace the content of `<%= write_to_file(example_logic_path, example_or_yaml) %>` with the following yaml:

```
<%= example_or_yaml %>
```

Running `<%= command("ansible-playbook #{example_logic_path} -c local")%>`, will print the out of office statement, because the `day` variable has been set to Saturday.

```
<%= last_command_output%>
```

Alternatively, we can require both conditions to be met by using the `and` operator. Replace your yaml, `<%= write_to_file(example_logic_path, example_and_yaml) %>`, with the following:

```
<%= example_and_yaml %>
```

In this scenario we have met both conditions with values set against `day` and `time` so can expect the message to be printed.

Run `<%= command("ansible-playbook #{example_logic_path} -c local")%>` to see that this happens.

```

<%= last_command_output%>
```
### Now it's your turn!
You are in a team that is required to install the following packages to a selection of servers:

- Apache
- Git
- FTP

These servers all have different operating systems. Make use of the when statement and looping to write a playbook to install these packages on both of the server types.

**Hints:**
Apache has the package name `httpd` on Centos and `apache2` on Ubuntu.

<%

playbook_yaml=<<YAML
---
- name: super loop
  hosts: all
  vars:
    list_of_packages:
      Ubuntu:
      - git
      - ftp
      - apache2
      CentOS:
      - git
      - ftp
      - httpd
  tasks:
  - name: print the list
    block:
    - apt:
        name: "{{item}}"
        state: present
      loop: "{{list_of_packages[ansible_distribution]}}"
      when: ansible_distribution=="Ubuntu"
    - yum:
        name: "{{item}}"
        state: present
      loop: "{{list_of_packages[ansible_distribution]}}"
      when: ansible_distribution=="CentOS"
YAML

inventory_yaml=<<YAML
centos-server
ubuntu-server
YAML

write_to_file('ansible/playbook.yml', playbook_yaml)
write_to_file('ansible/inventory.yml', inventory_yaml)

command("ansible-playbook ansible/playbook.yml -i ansible/inventory.yml")

 %>

If you've got everything right then the tests we've written for you should pass. Run `<%=command('pytest')%>` and you should see the following when they do pass:
```
<%=last_command_output%>
```

Good Luck!!
